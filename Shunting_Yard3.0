#include <QCoreApplication>
#include <QVector>
#include <QDebug>
#include <QHash>

QVector<QString> Tokenize (QString expression)
{
    QVector<QString> TokenList;
    int i = 0;
    while(i < expression.length())
    {
        if(expression[i].isDigit())
        {
            QString temp;
            temp.append(expression[i]);
            while(expression[i+1].isDigit() || expression[i+1]=='.')
            {
                temp.append(expression[i+1]);
                i++;
            }
            //Agregar error de exclusion
            TokenList.append(temp);
            i++;
        }
        else if(expression[i].isLetter())
        {
            QString temp;
            temp.append(expression[i]);
            while(expression[i+1].isLetter())
            {
                temp.append(expression[i+1]);
                i++;
            }
            TokenList.append(temp);
            i++;
        }
        else if (!expression[i].isSpace())
        {
            QString temp;
            temp.append(expression[i]);
            TokenList.append(temp);
            i++;
        }
        else
            i++;
    }
    //return TokenList;
    ///Shunting_Yard
    QVector<QString> OutPut;
    QVector<QString> Stack;
    QVector<QString> Error;
    Error.push_front("Error");
    QHash<QString,int> precedence;
    precedence["+"] = 2;
    precedence["-"] = 2;
    precedence["*"] = 3;
    precedence["/"] = 3;
    precedence["^"] = 4;
    precedence["%"] = 4;
    precedence["r"] = 4;

    QHash<QString,QChar> associative;
    associative["+"] = 'i';
    associative["-"] = 'i';
    associative["*"] = 'i';
    associative["/"] = 'i';
    associative["%"] = 'i';
    associative["^"] = 'd';
    associative["r"] = 'd';
    i = 0;
    ///Mientras hayan tokens a ser leidos
    while(i<TokenList.length())
    {
        ///Lee un token
        ///Si el Token es un numero, agregarlo al OutPut
        if(TokenList[i][0].isDigit())
        {
            OutPut.append(TokenList[i]);
            i++;
        }
        ///Si el token es una funcion, pongalo sobre la pila
        else if(TokenList[i][0].isLetter())
        {
            Stack.push_front(TokenList[i]);
            i++;
        }
        ///Si el token es un separador de argumento
        else if(TokenList[i][0]==',' || TokenList[i][0]==';' || TokenList[i][0]==':')
        {
            ///Mientras no se encuentre parentesis abierto, retire de la Stack los operadores
            //Hacer notar error si no se encuentra parentesis "("
            while(Stack[0][0]!='(')
            {
                OutPut.append(Stack[0]);
                Stack.pop_front();
                if(Stack[0].isNull())
                    return Error;
            }
            i++;
        }
        ///Si el token es un operador
        else if(!TokenList[i][0].isDigit() && !TokenList[i][0].isLetter()
                && TokenList[i][0]!='(' && TokenList[i][0]!=')')
        {

            ///mientras haya un operador en el tope de la pila
            while(!Stack.isEmpty() && !Stack[0][0].isDigit() && !Stack[0][0].isLetter() && Stack[0][0]!='(' &&
                  ((associative[TokenList[i]]=='i' && precedence[TokenList[i]]<=precedence[Stack[0]]) ||
                  (associative[TokenList[i]]=='d' && precedence[TokenList[i]]<precedence[Stack[0]])))
            {
                OutPut.append(Stack[0]);
                Stack.pop_front();
            }
            Stack.push_front(TokenList[i]);
            i++;
        }
        ///Si el token es un parentesis abierto, poner en la Stack
        else if(TokenList[i][0]=='(')
        {
            Stack.push_front(TokenList[i]);
            i++;
        }
        ///Si el token es un parentesis cerrado
        else if(TokenList[i][0]==')')
        {
            ///mientras el tope de la pila no sea un (
            while(Stack[0]!="(")
            {
                ///retire los operadores y pongalos en OutPut
                OutPut.append(Stack[0]);
                Stack.pop_front();
            }
            ///Retire el parentesis abierto
            Stack.pop_front();
            ///Si el tope de la pila es funcion, ponerlo al OutPut
            if(Stack[0][0].isLetter())
            {
                OutPut.append(Stack[0]);
                Stack.pop_front();

            }
            ///Si Stack termina sin encontrar "(", hay parentesisi sin pareja
            i++;
        }
    }

    ///Cuando ya no hay mas tokens por leer
    while(!Stack.isEmpty())
    {
        ///error de parentesis
        if(Stack[0][0]=='(' || Stack[0][0]==')')
        {
            return Error;
        }
        OutPut.append(Stack[0]);
        Stack.pop_front();
    }
    return OutPut;
}
int main(int argc, char *argv[])
{
    QCoreApplication a(argc, argv);
    ///3 + 4 * 2 / ( 1 - 5 ) ^ 2 ^ 3
    QVector<QString> test = Tokenize("sin ( max  ( 2, 3 ) / 3 * 3.1415 )");
    QVector<QString>::iterator it;
    for (it=test.begin(); it<test.end(); it++)
        qDebug() << *it;
    return a.exec();
}
