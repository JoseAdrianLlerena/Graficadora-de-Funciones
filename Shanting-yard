#include <QCoreApplication>
#include <QVector>
#include <QDebug>
#include <QHash>

QVector<QString> Tokenize (QString expression)
{
    QVector<QString> TokenList;
    int i = 0;
    while(i < expression.length())
    {
        if(expression[i].isDigit())
        {
            QString temp;
            temp.append(expression[i]);
            while(expression[i+1].isDigit() || expression[i+1]=='.')
            {
                temp.append(expression[i+1]);
                i++;
            }
            //Agregar error de exclusion
            TokenList.append(temp);
            i++;
        }
        else if(expression[i].isLetter())
        {
            QString temp;
            temp.append(expression[i]);
            while(expression[i+1].isLetter())
            {
                temp.append(expression[i+1]);
                i++;
            }
            TokenList.append(temp);
            i++;
        }
        else if (!expression[i].isSpace())
        {
            QString temp;
            temp.append(expression[i]);
            TokenList.append(temp);
            i++;
        }
        else
            i++;
    }
    //Shunting Yard
    QVector<QString> OutPut;
    QVector<QString> Stack;
    Stack.push_front("i");
    QHash<QString,int> precedence;
    precedence["+"] = 1;
    precedence["-"] = 1;
    precedence["*"] = 2;
    precedence["/"] = 2;
    precedence["^"] = 3;
    precedence["%"] = 3;
    precedence["r"] = 3;

    for(int i=0; i<TokenList.length();i++)
    {
        ///Lee Tokens
        for(int j=0;j<TokenList[i].length();j++)
        {
            QString tempo;
            ///Si el token es un numero, entonces agregarlo a la cola de salida.
            if(TokenList[i][j].isDigit())
            {
                tempo = TokenList[i];
                OutPut.append(tempo);
                break;
            }
            ///Si el token es un token de funcion, lo ponemos sobre la pila.
            else if (TokenList[i][j].isLetter())
            {
                tempo=TokenList[i];
                Stack.push_front(tempo);
                break;
            }
            ///Si el token es un separador de argumento.
            else if(TokenList[i][j]==',' || TokenList[i][j]==';' || TokenList[i][j]==':')
            {
                ///Mientras el token en el tope de la pila no sea "("
                while (Stack[0][0]!='(')
                {
                    ///Retirar los operadores del Stuck y ponerlos en OutPut.
                    tempo = Stack[0][0];
                    Stack.pop_front();
                    OutPut.append(tempo);
                    //Por Comcluir
                    ///Continuar buscando cumplir la condicion

                }
            }
            ///Si el token es un operador.
            else if(!TokenList[i][j].isDigit())
            {
                QString tempo1;
                tempo1 = TokenList[i][j];
                QString tempo2;
                tempo2 = Stack[0][0];
                if(Stack[0][0]!='i' && !Stack[0][0].isDigit() && Stack[0][0]!='(' && (precedence[tempo1] <= precedence[tempo2]))
                {
                        tempo = Stack[0][0];
                        Stack.pop_front();
                        OutPut.append(tempo);
                        break;
                }
                else
                {
                    tempo = TokenList[i];
                    Stack.push_front(tempo);
                    break;
                }
            }
            ///Si el token es un parentesis abierto, ponerlo a la pila;
            else if(TokenList[i][j]=='(')
            {
                tempo = TokenList[i];
                Stack.push_front(tempo);
                break;
            }
            ///Si el token es un parentesis cerrado, ....
            else if(TokenList[i][j]==')')
            {
                while(Stack[0][0]!='(')
                {
                    tempo = Stack[0][0];
                    Stack.pop_front();
                    OutPut.append(tempo);
                }
                Stack.pop_front();
                if(Stack[0][0].isLetter())
                {
                    tempo = Stack[0][0];
                    Stack.pop_front();
                    OutPut.append(tempo);
                }
                 //falta una condicion
            }
        }
    }
    ///Cuando ya no Tokens por leer
    while (Stack[0][0]!='i')
    {
        for (int m=0;m<Stack.length();m++)
            OutPut.append(Stack[m]);
    }
    Stack.pop_back();
    return OutPut;
}


int main(int argc, char *argv[])
{
    QCoreApplication a(argc, argv);

    QVector<QString> test = Tokenize("3+4sin67");
    QVector<QString>::iterator it;
    for (it=test.begin(); it<test.end(); it++)
        qDebug() << *it;
    return a.exec();
}
